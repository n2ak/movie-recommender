// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// generator client2 {
//   provider = "prisma-client-py"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserModel {
  id       Int     @id // @default(autoincrement())
  username String
  email    String  @unique
  password String
  active   Boolean @default(true)

  createdAt     DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime          @default(now()) @updatedAt
  movieRating   UserMovieRating[]
  MovieReview   MovieReview[]
  ReviewLike    ReviewLike[]
  ReviewComment ReviewComment[]
  CommentLike   CommentLike[]

  @@map("user")
}

model MovieModel {
  id            Int      @id // @default(autoincrement())
  title         String
  genres        String[]
  imdbId        Int
  avg_rating    Float
  href          String
  total_ratings Int
  year          Int

  createdAt   DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime          @default(now()) @updatedAt
  userRating  UserMovieRating[]
  MovieReview MovieReview[]

  @@map("movie")
}

model UserMovieRating {
  id     Int        @id @default(autoincrement())
  movie  MovieModel @relation(fields: [movieModelId], references: [id])
  user   UserModel  @relation(fields: [userModelId], references: [id])
  rating Float

  timestamp DateTime

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt

  movieModelId Int
  userModelId  Int

  @@map("movie_rating")
}

model MovieReview {
  id           Int        @id @default(autoincrement())
  movie        MovieModel @relation(fields: [movieModelId], references: [id])
  user         UserModel  @relation(fields: [userModelId], references: [id])
  movieModelId Int
  userModelId  Int

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt

  text          String
  ReviewLike    ReviewLike[]
  ReviewComment ReviewComment[]
}

model ReviewLike {
  id            Int         @id @default(autoincrement())
  movie         MovieReview @relation(fields: [movieReviewId], references: [id])
  user          UserModel   @relation(fields: [userModelId], references: [id])
  movieReviewId Int
  userModelId   Int
  createdAt     DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime    @default(now()) @updatedAt
}

model ReviewComment {
  id            Int           @id @default(autoincrement())
  review        MovieReview   @relation(fields: [movieReviewId], references: [id])
  user          UserModel     @relation(fields: [userModelId], references: [id])
  comment       String
  movieReviewId Int
  userModelId   Int
  createdAt     DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime      @default(now()) @updatedAt
  CommentLike   CommentLike[]
}

model CommentLike {
  id              Int           @id @default(autoincrement())
  comment         ReviewComment @relation(fields: [reviewCommentId], references: [id])
  user            UserModel     @relation(fields: [userModelId], references: [id])
  createdAt       DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime      @default(now()) @updatedAt
  reviewCommentId Int
  userModelId     Int
}
