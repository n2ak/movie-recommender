name: "movie_recommendation_system"
services:
  db:
    profiles: ["local_training","web"]
    container_name: db
    image: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
      POSTGRES_DB: mydb

    volumes:
      - ./vlms/database:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - net
    restart: unless-stopped

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  adminer:
    container_name: adminer
    image: adminer
    restart: unless-stopped
    ports:
      - 8082:8080
    networks:
      - net
      
  redis:
    profiles: ["web"]
    container_name: redis
    image: redis:alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - net
    environment:
      REDIS_PASSWORD: password
      # pass time to live env

  webapp:
    profiles: ["web"]
    container_name: webapp
    build:
      context: ./frontend
      dockerfile: apps/web/Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - net
    environment:
      AUTH_SECRET: "lv5macbVjLrol6GRhpHvpt/lNIPKKtEeIVIfKYKG1D8: "
      DATABASE_URL: "postgresql://admin:password@db:5432/mydb?schema=public"
      BACKEND_URL: "http://host.docker.internal:8000"
      NEXTAUTH_URL: "http://localhost:3000/"
      AUTH_TRUST_HOST: true

      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password

  backend:
    profiles: ["backend_api","web"]
    container_name: backend_api
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
        restart: true
      mlflow:
        condition: service_healthy
        restart: true
    healthcheck:
      test:
        [
          "CMD","python","-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      MLFLOW_TRACKING_URI: "http://mlflow:8081"
      MLFLOW_ARTIFACT_UPLOAD_DOWNLOAD_TIMEOUT: 30
    restart: "no"
    networks:
      - net

  mlflow:
    profiles: ["local_training","web"]
    container_name: mlflow-server
    image: ghcr.io/mlflow/mlflow:v3.3.2
    ports:
      - "8081:8081"
    command: >
      mlflow server 
          --host 0.0.0.0 
          --port 8081
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD","python","-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8081/health')",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - ./vlms/mlruns:/mlruns
      - ./vlms/mlartifacts:/mlartifacts
    environment:
      MLFLOW_PORT: "8081"
      MLFLOW_ARTIFACT_UPLOAD_DOWNLOAD_TIMEOUT: 30
    networks:
      - net
  
  airflow:
    profiles: ["airflow"]
    container_name: custom_airflow
    build: 
      context: ./workflow
    ports:
      - 8080:8080
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow_db:5432/airflow_db
    volumes:
      - ./workflow/dags:/opt/airflow/dags
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - airflow_db
      - mlflow
    command: >
      bash -c "airflow db migrate
       && echo "Server is starting up..."
       && airflow standalone"
    user: "0:0"
    networks:
      - airflow_net
    group_add:
      - '1001'
    env_file:
      - path: ./workflow/.env
        required: true
    restart: unless-stopped

  airflow_db:
    profiles: ["airflow"]
    container_name: airflow_db
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow_db
    volumes:
      - ./vlms/postgres-db-volume:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - airflow_net

networks:
  net:
    driver: bridge
  airflow_net:
    driver: bridge