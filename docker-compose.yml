services:
  db:
    container_name: db
    image: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
      POSTGRES_DB: mydb

    volumes:
      - ./vlms/database:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - net
    restart: unless-stopped

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  adminer:
    container_name: adminer
    image: adminer
    restart: unless-stopped
    ports:
      - 8080:8080
    networks:
      - net
  redis:
    container_name: redis
    image: redis:alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - net
    environment:
      REDIS_PASSWORD: password
      # pass time to live env

  # webapp:
  #   container_name: webapp
  #   build:
  #     context: ./frontend
  #     dockerfile: apps/web/Dockerfile
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #       restart: true
  #   networks:
  #     - net
  #   environment:
  #     AUTH_SECRET: "lv5macbVjLrol6GRhpHvpt/lNIPKKtEeIVIfKYKG1D8: "
  #     DATABASE_URL: "postgresql://admin:password@db:5432/mydb?schema=public"
  #     BACKEND_URL: "http://host.docker.internal:8000"
  #     NEXTAUTH_URL: "http://localhost:3000/"
  #     AUTH_TRUST_HOST: true

  #     REDIS_HOST: redis
  #     REDIS_PORT: 6379
  #     REDIS_PASSWORD: password
networks:
  net:
    driver: bridge
